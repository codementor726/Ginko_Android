package com.ginko.ginko;

import android.app.Activity;
import android.content.Intent;
import android.os.Bundle;
import android.support.v4.app.Fragment;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;

import com.ginko.api.request.UserRequest;
import com.ginko.common.ApiManager;
import com.ginko.common.Logger;
import com.ginko.data.JsonResponse;
import com.ginko.data.ResponseCallBack;
import com.ginko.vo.UserLoginVO;

public class MainFragment extends Fragment {
	private static final String TAG = "MainFragment";
	private UiLifecycleHelper uiHelper;

    public ResponseCallBack<UserLoginVO> getCallBack() {
        return callBack;
    }

    public void setCallBack(ResponseCallBack<UserLoginVO> callBack) {
        this.callBack = callBack;
    }

    private ResponseCallBack<UserLoginVO> callBack;

	private boolean alreadyLogin;
	
	private Session.StatusCallback callback = new Session.StatusCallback() {
		@Override
		public void call(Session session, SessionState state,
				Exception exception) {
			onSessionStateChange(session, state, exception);
		}
	};

	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		uiHelper = new UiLifecycleHelper(getActivity(), callback);
		uiHelper.onCreate(savedInstanceState);
	}

	@Override
	public View onCreateView(LayoutInflater inflater, ViewGroup container,
			Bundle savedInstanceState) {
//		View view = inflater.inflate(R.layout.login, container, false);
		View view = new View(this.getActivity());
		LoginButton authButton = (LoginButton) this.getActivity().findViewById(R.id.authButton);
		if (authButton != null) {
			authButton.setFragment(this);
			//facebook auth
			//authButton.setReadPermissions(Arrays.asList("email"));
		}
		return  view;
	}

	private void onSessionStateChange(Session session, SessionState state,
			Exception exception) {
		if (state.isOpened()) {
			Logger.error("true");
			// TODO the method alwasy is called twice.
			if (alreadyLogin) {
				return;
			}

			final String accessToken = Session.getActiveSession().getAccessToken();
			Logger.info("accessToken:" + accessToken);
			Request.newMeRequest(session, new Request.GraphUserCallback() {
				public void onCompleted(GraphUser user, Response response) {
					Logger.error(user + "");
					if (user != null) {
						loginWithFacebook(accessToken, user);
					} else {
						// TODO, show login fail popup
					}
				}}).executeAsync();

			alreadyLogin = true;
			Logger.info("Logged in with facebook...");
		} else if (state.isClosed()) {
			Logger.info("Logged out from facebook...");
		}
	}
	
	public void loginWithFacebook(final String accessToken, GraphUser user) {
		String firstName = user.getFirstName();
		String lastName = user.getLastName();
		String id = user.getId();
		String email = user.getProperty("email").toString();

		Logger.error(id);
		Logger.error(firstName);
		Logger.error(lastName);
		Logger.error(email);

		final Activity lognActivty = this.getActivity();
		UserRequest.loginWithFacebook(email, accessToken,
				new ResponseCallBack<UserLoginVO>() {

					@Override
					public void onCompleted(JsonResponse<UserLoginVO> response) {
						if (response.isSuccess()) {
							callBack.onCompleted(response);
						} else
							ApiManager.showErrorMessage(lognActivty);
					}

				});
	}

	@Override
	public void onResume() {
		super.onResume();

		// For scenarios where the main activity is launched and user
		// session is not null, the session state change notification
		// may not be triggered. Trigger it if it's open/closed.
		Session session = Session.getActiveSession();
		if (session != null && (session.isOpened() || session.isClosed())) {
			onSessionStateChange(session, session.getState(), null);
		}

		if (uiHelper != null) {
			uiHelper.onResume();
		}
	}

	@Override
	public void onActivityResult(int requestCode, int resultCode, Intent data) {
		super.onActivityResult(requestCode, resultCode, data);
		if (uiHelper != null) {
			uiHelper.onActivityResult(requestCode, resultCode, data);
		}
	}

	@Override
	public void onPause() {
		super.onPause();
		if (uiHelper != null) {
			uiHelper.onPause();
		}
	}

	@Override
	public void onDestroy() {
		super.onDestroy();
		if (uiHelper != null) {
			uiHelper.onDestroy();
		}
	}

	@Override
	public void onSaveInstanceState(Bundle outState) {
		super.onSaveInstanceState(outState);
		if (uiHelper != null) {
			uiHelper.onSaveInstanceState(outState);
		}
	}
}